package io.petermueller.petrinetz.views;

import java.awt.BorderLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import org.graphstream.graph.*;
import org.graphstream.graph.implementations.*;
import org.graphstream.ui.spriteManager.Sprite;
import org.graphstream.ui.spriteManager.SpriteManager;
import org.graphstream.ui.swing_viewer.SwingViewer;
import org.graphstream.ui.swing_viewer.ViewPanel;
import io.petermueller.petrinetz.models.rgraph.Marking;
import io.petermueller.petrinetz.models.rgraph.TransitionArc;

public class RGraphView {
	public JPanel panel;
	private Graph graph;
	public ViewPanel view;
	public SwingViewer viewer;
	private SpriteManager sman;
	
	public RGraphView() {
		panel = new JPanel();
		graph = new MultiGraph("Reachability Graph");
		viewer = new SwingViewer(
			graph,
			SwingViewer.ThreadingModel.GRAPH_IN_GUI_THREAD
		);
		viewer.enableAutoLayout();
		view = (ViewPanel) viewer.addDefaultView(false);
		sman = new SpriteManager(graph);
		
		panel.setBackground(Color.white);	
		panel.setBorder(
			BorderFactory.createLineBorder(new Color(0xDADCE0), 1)
		);
		panel.setLayout(new BorderLayout());
		panel.add((JPanel) view, BorderLayout.CENTER);
	}
	
	private void initGraph() {
		graph.clear();
		clearSprites();
		graph.setAttribute("ui.quality");
		graph.setAttribute("ui.antialias");
		graph.setAttribute("ui.stylesheet", initStyleSheet());
	}
	
	public void renderInitialRGraph(List<Marking> markings) {
		initGraph();
		for (Marking marking : markings) {
			createNode(marking);
		}
		view.getCamera().resetView();
	}
	
	public void updateGraph(List<Marking> markings, List<TransitionArc> arcs) {
		for (Marking marking : markings) {
			if (!markingExists(marking)) {
				createNode(marking);
			}
		}
		for (TransitionArc arc : arcs) {
			if (!arcExists(arc)) {
				createEdge(arc);
			}
		}
	}
	
	private void createNode(Marking marking) {
		String id = marking.id;
		graph.addNode(id);
		graph.getNode(id).setAttribute("ui.label", id);
	}
	
	private void createEdge(TransitionArc arc) {
		String id = arc.id;
		String source = arc.source.id;
		String target = arc.target.id;
		graph.addEdge(id + source + target, source, target, true);
		Sprite sprite = sman.addSprite(id + source + target);
		sprite.attachToEdge(id + source + target);
		sprite.setPosition(0.35);
		sprite.setAttribute("ui.label", id);
	}
	
	private Boolean markingExists(Marking marking) {
		String id = marking.id;
		if (graph.getNode(id) != null) {
			return true;
		}
		return false;
	}
	
	private Boolean arcExists(TransitionArc arc) {
		String id = arc.id;
		String source = arc.source.id;
		String target = arc.target.id;
		String edgeId = id + source + target;
		if (graph.getEdge(edgeId) != null) {
			return true;
		}
		return false;
	}
	
	private void clearSprites() {
		List<Sprite> spriteList = getSprites();
		for (Sprite sprite : spriteList) {
			sman.removeSprite(sprite.getId());
		}
	}
	
	private List<Sprite> getSprites() {
		Iterator<? extends Sprite> spriteIter = sman.sprites().iterator();
		List<Sprite> spriteList = new ArrayList<Sprite>();
		while (spriteIter.hasNext()) {
			spriteList.add(spriteIter.next());
		}
		return spriteList;
	}

	private String initStyleSheet() {
		String styleSheet;
		styleSheet =
	        "node {" +
	    	"  shape: box;" +
	        "  text-color: #AE5901;" +
	        "  text-size: 11;" +
	        "  padding: 4px, 2px;" +
	        "  size-mode: fit;" +
	        "  fill-color: #FEEFC3;" +
	        "}" +
	        "edge {" +
	        "  fill-color: #3C4043;" +
	        "  arrow-shape: arrow;" +
	        "  arrow-size: 12px, 6px;" +
	        "}" +
	        "sprite {" +
	        "  text-background-color: #D2E3FC;" +
	        "  text-color: #185ABC;" +
	        "  text-size: 11;" +
	        "  text-background-mode: rounded-box;" +
	        "  text-padding: 3px, 0px;" +
	        "}";
		
		 return styleSheet;
	}
}