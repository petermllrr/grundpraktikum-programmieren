package io.petermueller.petrinetz.controllers;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import io.petermueller.petrinetz.models.filesystem.FileSystemModel;
import io.petermueller.petrinetz.models.petrinet.PetriNetModel;
import io.petermueller.petrinetz.models.rgraph.RGraphModel;
import io.petermueller.petrinetz.models.rgraph.TransitionArc;
import io.petermueller.petrinetz.util.BoundednessAnalysis;
import io.petermueller.petrinetz.util.Event;
import io.petermueller.petrinetz.util.EventListener;
import io.petermueller.petrinetz.views.RGraphView;
import io.petermueller.petrinetz.views.TextAreaView;
import io.petermueller.petrinetz.views.ToolbarView;

public class ToolbarController {
	private PetriNetModel petriNetModel;
	private ToolbarView toolbarView;
	private FileSystemModel fileSystemModel;
	
	public ToolbarController(
		ToolbarView toolbarView,
		FileSystemModel fileSystemModel,
		PetriNetModel petriNetModel,
		RGraphModel rGraphModel,
		RGraphView rGraphView,
		TextAreaView textAreaView) {
		this.petriNetModel = petriNetModel;
		this.toolbarView = toolbarView;
		this.fileSystemModel = fileSystemModel;
		
		// TODO use single Listener
		toolbarView.buttonPrevFile.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				fileSystemModel.readNewFile(fileSystemModel.prevFile);
			}
		});
		
		toolbarView.buttonNextFile.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				fileSystemModel.readNewFile(fileSystemModel.nextFile);
			}
		});
		
		toolbarView.buttonAddToken.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				petriNetModel.addUserToken();
			}
		});
		
		toolbarView.buttonRemoveToken.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				petriNetModel.removeUserToken();
			}
		});
		
		toolbarView.buttonReset.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				petriNetModel.reset();
				//rGraphModel.goToMarking(petriNetModel.places);
			}
		});
		
		toolbarView.buttonClearRG.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				petriNetModel.reset();
				rGraphModel.reset(petriNetModel.places);
			}
		});
		
		toolbarView.buttonClearText.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				textAreaView.clear();
			}
		});
		
		toolbarView.buttonBoundednessAnalysis.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				BoundednessAnalysis analysis = new BoundednessAnalysis(
						petriNetModel,
						rGraphModel);
				String result;
				if (analysis.isBounded) {
					result = "Petri net is bounded.";
				} else {
					result = "Petri net is unbounded.\n";
					result = result + "m:  " + analysis.m1.id + "\n" +
							"m': " + analysis.m2.id + "\n" +
							"Path:\n";
					for (TransitionArc arc : analysis.detectionPath) {
						result = result + arc.id + "\n";
					}
				}
				textAreaView.setText(result);
				rGraphView.updateGraph(rGraphModel.markings, rGraphModel.arcs);
			}
		});
		
		fileSystemModel.addEventListener(new EventListener() {
			@Override
			public void event(Event eventType) {
				if (eventType == Event.FILESYSTEM_NEW_FILE_OPENED) {
					togglePrevNextFileButtons();
					toggleResetButton();
					toggleTokenButtons();
					toggleClearRGButton();
					toggleClearTextButton();
					toggleBoundednessAnalysisButton();
				}
			}
		});
		
		petriNetModel.addEventListener(new EventListener() {
			@Override
			public void event(Event eventType) {			
				if (eventType == Event.PETRINET_USER_SELECTED_A_PLACE) {
					toggleTokenButtons();
				}
				if (eventType == Event.PETRINET_TRANSITION_FIRED ||
					eventType == Event.PETRINET_MARKING_EDITED) {
					toggleTokenButtons();
					toggleResetButton();
				}
			}
		});
	}
	
	private void togglePrevNextFileButtons() {
		if (fileSystemModel.prevFile != null) {
			toolbarView.buttonPrevFile.setEnabled(true);
		} else {
			toolbarView.buttonPrevFile.setEnabled(false);
		}
		if (fileSystemModel.nextFile != null) {
			toolbarView.buttonNextFile.setEnabled(true);
		} else {
			toolbarView.buttonNextFile.setEnabled(false);
		}
	}
	
	private void toggleTokenButtons() {
		if (petriNetModel.selectedPlace == null) {
			toolbarView.buttonAddToken.setEnabled(false);
			toolbarView.buttonRemoveToken.setEnabled(false);
		} else {
			toolbarView.buttonAddToken.setEnabled(true);
			if (petriNetModel.selectedPlace.currentTokens > 0) {
				toolbarView.buttonRemoveToken.setEnabled(true);
			} else {
				toolbarView.buttonRemoveToken.setEnabled(false);
			}
		}
	}
	
	private void toggleResetButton() {
		if (petriNetModel.isAtCustomMarking) {
			toolbarView.buttonReset.setEnabled(true);
		} else {
			toolbarView.buttonReset.setEnabled(false);
		}
	}
	
	private void toggleClearRGButton() {
		toolbarView.buttonClearRG.setEnabled(true);
	}
	
	private void toggleClearTextButton() {
		toolbarView.buttonClearText.setEnabled(true);
	}
	
	private void toggleBoundednessAnalysisButton() {
		toolbarView.buttonBoundednessAnalysis.setEnabled(true);
	}
}