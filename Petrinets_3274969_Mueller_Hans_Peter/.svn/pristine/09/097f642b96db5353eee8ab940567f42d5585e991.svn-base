package io.petermueller.petrinetz.models.petrinet;

import java.util.ArrayList;
import java.util.List;
import io.petermueller.petrinetz.util.Event;
import io.petermueller.petrinetz.util.EventEmitter;

public class PetriNetModel extends EventEmitter {
	public List<Transition> transitions;
	public List<Place> places;
	public List<Arc> arcs;
	public MarkingsTree markingsTree = new MarkingsTree();
	
	public Place selectedPlace;
	public Boolean markingChanged;
	public Boolean fileChanged;
	
	public PetriNetModel() {
		transitions = new ArrayList<Transition>();
		places = new ArrayList<Place>();
		arcs = new ArrayList<Arc>();
	}
	
	public void clear() {
		transitions.clear();
		places.clear();
		arcs.clear();
		selectedPlace = null;
		markingChanged = false;
		fileChanged = false;
		markingsTree = new MarkingsTree();
		markingsTree.addMarking(new Marking());
	}
	
	public void addTransition(String id) {
		transitions.add(new Transition(id));
		updateTransitions();
	}
	
	public void addPlace(String id) {
		places.add(new Place(id));
		getCurrentMarking().addPlaceTokenTuple(id, 0);
		updateTransitions();
	}
	
	public void addArc(String id, String source, String target) {
		Location sourceObj = getLocation(source);
		Location targetObj = getLocation(target);
		arcs.add(new Arc(id, sourceObj, targetObj));
		updateTransitions();
	}
	
	public void setName(String id, String name) {
		Location location = getLocation(id);
		location.name = name;
	}
	
	public void setTokens(String id, int tokens) {
		getCurrentMarking().setTokens(id, tokens);
		updateTransitions();
	}
	
	public void setPosition(String id, int x, int y) {
		Location location = getLocation(id);
		location.x = x;
		location.y = y * (-1);
	}
	
	// TODO remove later
	public String getContentsAsString() {
		String text = "Transitions: ";
		for (Transition transition : transitions) {
			text = text + "<" + transition.id + ", "
					          + transition.name + ", x: "
					          + transition.x + ", y: "
					          + transition.y + ">, ";
		}
		text = text + "\n";
		text = text + "Places: ";
		for (Place place : places) {
			text = text + "<" + place.id + ", "
						      + place.name + " "
						      + getTokens(place.id) + ", x: "
							  + place.x + ", y: "
							  + place.y + ">, ";
		}
		text = text + "\n";
		text = text + "Arcs: ";
		for (Arc arc : arcs) {
			text = text + "<" + arc.id + ", "
							  + arc.source.id + ", "
							  + arc.target.id + ">, ";
		}
		return text;
	}
	
	public void updateTransitions() {
		for (Transition transition : transitions) {
			if (hasTruePreconditions(transition)) {
				transition.isEnabled = true;
			} else {
				transition.isEnabled = false;
			}
		}
	}
	
	public List<Place> getInputs(Transition transition) {
		List<Place> inputs = new ArrayList<Place>();
		for (Arc arc : arcs) {
			if (arc.target == transition) {
				inputs.add((Place) arc.source);
			}
		}
		return inputs;
	}
	
	public List<Place> getOutputs(Transition transition) {
		List<Place> outputs = new ArrayList<Place>();
		for (Arc arc : arcs) {
			if (arc.source == transition) {
				outputs.add((Place) arc.target);
			}
		}
		return outputs;
	}
	
	public Location getLocation(String query) {
		for (Transition transition : transitions) {
			if (transition.id.equals(query)) {
				return transition;
			}
		}
		for (Place place : places) {
			if (place.id.equals(query)) {
				return place;
			}
		}
		return null;
	}

	public Boolean hasTruePreconditions(Transition transition) {
		List<Place> preconditions = getInputs(transition);
		Boolean result = true;
		for (Place place : preconditions) {
			if (getTokens(place.id) < 1) {
				result = false;
			}
		}
		return result;
	}
	
	public void fire(Transition transition) {
		if (hasTruePreconditions(transition)) {
			List<Place> inputs = getInputs(transition);
			List<Place> outputs = getOutputs(transition);
			Marking newMarking = new Marking();
			newMarking.copyTokens(getCurrentMarking());
			for (Place place : inputs) {
				newMarking.setTokens(
					place.id,
					newMarking.getTokens(place.id) - 1
				);
			}
			for (Place place : outputs) {
				newMarking.setTokens(
					place.id, 
					newMarking.getTokens(place.id) + 1
				);
			}
			markingsTree.addMarking(newMarking);
			updateTransitions();
			fireEvent(Event.PETRINET_UPDATED);
			markingChanged = true;
			fireEvent(Event.MARKING_CHANGED);
		}
	}
	
	public void setActivePlace(String id) {
		selectedPlace = (Place) getLocation(id);
		fireEvent(Event.ACTIVE_PLACE_CHANGED);
	}
	
	public void setNoActivePlace() {
		selectedPlace = null;
		fireEvent(Event.ACTIVE_PLACE_CHANGED);
	}
	
	public void addUserToken() {
		selectedPlace.tokens ++;
		selectedPlace.startTokens = selectedPlace.tokens;
		markingChanged = false;
		fileChanged = true;
		updateTransitions();
		fireEvent(Event.PETRINET_UPDATED);
		fireEvent(Event.MARKING_CHANGED);
	}
	
	public void removeUserToken() {
		selectedPlace.tokens --;
		selectedPlace.startTokens = selectedPlace.tokens;
		markingChanged = false;
		fileChanged = true;
		updateTransitions();
		fireEvent(Event.PETRINET_UPDATED);
		fireEvent(Event.MARKING_CHANGED);
	}
	
	public void reset() {
		for (Place place : places) {
			place.tokens = place.startTokens;
		}
		markingChanged = false;
		updateTransitions();
		fireEvent(Event.PETRINET_UPDATED);
		fireEvent(Event.MARKING_CHANGED);
	}
	
	private int getTokens(String id) {
		return markingsTree.getCurrentMarking().getTokens(id);
	}
	
	public Marking getCurrentMarking() {
		return markingsTree.getCurrentMarking();
	}
}