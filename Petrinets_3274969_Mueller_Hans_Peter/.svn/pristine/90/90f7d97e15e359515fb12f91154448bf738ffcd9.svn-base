

⠸⣷⣦⠤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⠀⠀⠀
⠀⠙⣿⡄⠈⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⠊⠉⣿⡿⠁⠀⠀⠀
⠀⠀⠈⠣⡀⠀⠀⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠊⠁⠀⠀⣰⠟⠀⠀⠀⣀⣀
⠀⠀⠀⠀⠈⠢⣄⠀⡈⠒⠊⠉⠁⠀⠈⠉⠑⠚⠀⠀⣀⠔⢊⣠⠤⠒⠊⠉⠀⡜
⠀⠀⠀⠀⠀⠀⠀⡽⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠩⡔⠊⠁⠀⠀⠀⠀⠀⠀⠇
⠀⠀⠀⠀⠀⠀⠀⡇⢠⡤⢄⠀⠀⠀⠀⠀⡠⢤⣄⠀⡇⠀⠀⠀⠀⠀⠀⠀⢰⠀
⠀⠀⠀⠀⠀⠀⢀⠇⠹⠿⠟⠀⠀⠤⠀⠀⠻⠿⠟⠀⣇⠀⠀⡀⠠⠄⠒⠊⠁⠀
⠀⠀⠀⠀⠀⠀⢸⣿⣿⡆⠀⠰⠤⠖⠦⠴⠀⢀⣶⣿⣿⠀⠙⢄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢻⣿⠃⠀⠀⠀⠀⠀⠀⠀⠈⠿⡿⠛⢄⠀⠀⠱⣄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢸⠈⠓⠦⠀⣀⣀⣀⠀⡠⠴⠊⠹⡞⣁⠤⠒⠉⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⠃⠀⠀⠀⠀⡌⠉⠉⡤⠀⠀⠀⠀⢻⠿⠆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠰⠁⡀⠀⠀⠀⠀⢸⠀⢰⠃⠀⠀⠀⢠⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢶⣗⠧⡀⢳⠀⠀⠀⠀⢸⣀⣸⠀⠀⠀⢀⡜⠀⣸⢤⣶⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠈⠻⣿⣦⣈⣧⡀⠀⠀⢸⣿⣿⠀⠀⢀⣼⡀⣨⣿⡿⠁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠻⠿⠿⠓⠄⠤⠘⠉⠙⠤⢀⠾⠿⣿⠟⠋


### Refactoring

- [ ] Views should subscribe to models directly
- [ ] Only use controllers for _user_ actions
- [ ] Controllers could be ActionListener objects?
- [ ] make rGraph subscribe to petrinet directly. Or:
	  petrinet.attachRGraph(rGraph)

### Unit tests

RGraphModel

	@Test
	@DisplayName("keeps rGraph and Petri net in sync")
	void syncsRGraphAndPetriNet() {
		petriNet = new PetriNetModel();
		petriNet.addPlace("p1");
		petriNet.setName("p1", "place 1");
		petriNet.setTokens("p1", 3);
		petriNet.addPlace("p2");
		petriNet.setPosition("p2", 5000, 3);
		petriNet.setName("p2", "place 2");
		petriNet.addTransition("t1");
		petriNet.setName("t1", "t1 transition");
		petriNet.addTransition("t2");
		petriNet.setName("t2", "t2 transition");
		petriNet.addArc("a1", "p1", "t1");
		petriNet.addArc("a2", "t1", "p2");
		petriNet.addArc("a3", "p2", "t2");
		petriNet.addArc("a4", "t2", "p1");
		petriNet.fire(petriNet.transitions.get(0));
		rGraph.addTransition(petriNet.places, petriNet.lastTransition);
	}



### Boundedness Analysis

- [X] Before starting an analysis, reset the petrinet
- [X] For unbounded graphs, highlight the visitedQueue

- 250: FIXED endlosschleife
- 257: FIXED endlosschleife (circle)
- 274: FIXED endlosschleife (circle)
- 276: FIXED endlosschleife (circle)


### RGraph

- [ ] Anfangsknoten muss hervorgehoben werden wenn aktiv
- [ ] clear rgraph button
- [X] +/- buttons resests rgraph
- [X] +/- buttons do anything
- [X] Click in rgraph sets petrinet to marking
- [X] Reset muss isActive veraendern
- [X] Styling des aktiven
- [X] Styling des zuletzt besuchten wie in PDF

### Petrienet

- [X] Tokens > 9
- [X] Active place visual highlight
- [ ] Check if "Beispiele" directory exists
- [X] Remove unneeded icons
- [ ] Refactor FileSystemModel (talk to controllers etc)
- [X] Remove or improve empty Layout
- [X] Interface fuer Eventschleudern schreiben

### General

- [ ] Remove min/max sizes and work with emptyBorder or
	  setMargins(new Inset(...)) paddings
	
- - -

## Notes

### Markings und der Erreichbarkeitsgraph:
	  
MarkingsTree
	- Marking
		- "[s1, 0], [s2, 3], [s3, 4]"
		- Children
			- Marking
				- [s1, 0], [s2, 3], [s3, 4]
				- Children
					- Marking
						- [s1, 1], [s2, 2], [s3, 5]
						- Current: true
						- Children
			- Marking
				- [...] // Das waere eine Abzweigung

class Marking
	- List<int> markings
	- Boolean currentMarking
	- List<Marking> children
	- String getMarkingLabel()

class MarkingTree
	- Marking root
	- Marking getCurrentMarking()
	- Marking getParentMarking()
	- Boolean markingExists() ?
	- void addMarking(Marking)
	- void removeAllMarkingsExceptRoot()

PetriNetModel
	- void fire()
		- checkIfFireable()
		- MarkingTree.getCurrentMarking()
		- MarkingTree.addMarkingAt(currentMarking)

Event.MARKING_CHANGED
	- PetriNetController
		- void updatePetriNet(PetriNetModel.getCurrentMarking)
	- ReachabilityGraphController
		- void updateRG(addNewChild(PetriNetModel.getCurrentMarking())

ToolbarController
	- Event: Reset Button Pressed
		- PetriNetModel.setRootAsCurrent()
		- PetriNetView.updatePetriNet(getCurrentMarking)
		- ReachabilityGraphView.update()

ToolbarController
	- Event: Change Markers
	    - PetriNetModel.removeAllMarkingsExceptRoot
	    - PetriNetView.updatePetriNet(getCurrentMarking)
	    - ReachabilityGraphView.removeAllExceptRoot()
    
ReachabilityGraphView
	- void removeAllExceptRoot()
	- void update()
	
---

RGraphMode
- List<Marking> markings
- List<Arc> arcs

Marking
- String id

Arc
- String id
- Marking source
- Marking target